"use client";
import React from "react";
import Head from "next/head";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { toast } from "react-toastify";
import { useTranslation } from "next-i18next";
import ClientHeader from "@/components/Client/ClientHeader";
import { GetServerSideProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useMutation } from "react-query";
import { FadeLoader } from "react-spinners";
import { isValidEmail, isValidPassword } from "@/constant/ValidRegex";
import { ROUTER } from "../../shared/constant/router";
import { signInUser } from "@/services";
import { useFormik } from "formik";
import { FormValues } from "@/interfaces";

const LoginPage: React.FC = () => {
  const { t } = useTranslation("common");
  const validate = (values: FormValues) => {
    let errors: Partial<FormValues> = {};

    if (!values.email) {
      errors.email = t("Required");
    } else if (!isValidEmail(values.email)) {
      errors.email = t("Invalid email address");
    }

    if (!values.password) {
      errors.password = t("Required");
    } 
    else if (!isValidPassword(values.password)) {
      errors.password = t("passwordFormik");
    }

    return errors;
  };
  const { push } = useRouter();

  const { mutate: signin } = useMutation({
    mutationFn: signInUser,
    onSuccess: (data) => {
      if (data && data.data && data.data.user) {
        setTimeout(() => {
          toast.success("Signin successfully!", { autoClose: 1000 });
        });
        localStorage.setItem("refresh_token", data?.data.user.refresh_token);
        localStorage.setItem("access_token", data?.data.user.access_token);
        setTimeout(() => {
          push(ROUTER.HOME);
        }, 1500);
      } else {
        toast.error("Please, Enter Correct Email and Password! ", {
          autoClose: 1000,
        });
      }
    },
    onError: () => {
      setTimeout(() => {
        toast.error("Please, Enter Correct Email and Password!", {
          autoClose: 1000,
        });
      });
    },
  });
  // const { mutate: signin } = useMutation({
  //   mutationFn: signInUser,
  //   onSuccess: (data) => {
  //     if (data && data.data && data.data.user) {
  //       const userEmail = data.data.user.email;
  //       if (userEmail !== "admin@gmail.com") {
  //         localStorage.setItem("refresh_token", data?.data.user.refresh_token);
  //         localStorage.setItem("access_token", data?.data.user.access_token);
  //         setTimeout(() => {
  //           push(ROUTER.HOME);
  //         }, 1500);
  //         toast.success("Signin successfully!", { autoClose: 1000 });
  //       } else {
  //         toast.error("Please, Enter Correct Email and Password!", {
  //           autoClose: 1000,
  //         });
  //       }
  //     } else {
  //       toast.error("Please, Enter Correct Email and Password!", {
  //         autoClose: 1000,
  //       });
  //     }
  //   },
  //   onError: () => {
  //     toast.error("Please, Enter Correct Email and Password!", {
  //       autoClose: 1000,
  //     });
  //   },
  // });

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
    },
    validate,
    onSubmit: (values) => {
      signin(values);
    },
  });

  return (
    <>
      <Head>
        <title>Foody | {t("Login")}</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main
        className="bg-white dark:bg-black sm:mr-32px sm:ml-32px font-body "
        style={{ zoom: "0.66" }}
      >
        <ClientHeader />
        <div className="md:flex-row flex-col mx-3 my-3 flex sm:mx-0 ">
          <div
            className="lg:w-3/6 md:w-[50%] dark:bg-green-600 w-full bg-clientRed lg:h-fit h-[160px] rounded-4 sm:mr-10"
            data-aos="fade-right"
          >
            <Image
              alt=""
              width={100}
              height={100}
              src="/svgs/login.svg"
              className="lg:w-5/6 lg:h-[740px] w-[240px] h-[150px] lg:ml-32px sm:mt-5 sm:ml-68px lg::mr-24 sm:mb-40 mx-auto"
            />
          </div>
          <form
            className="lg:w-2/6 md:w-[50%] w-full mx-auto tracking-wider"
            onSubmit={formik.handleSubmit}
          >
            <div className="flex lg:ml-20 flex-row sm:gap-x-16 sm:ml-174px sm:mb-18 sm:mt-105px mt-11 gap-x-9 mb-15 justify-center">
              <p className="text-clientRed dark:text-green-300 sm:text-3xl text-xl font-medium ">
                {t("Login")}
              </p>
              <p
                onClick={() => push(ROUTER.REGISTER)}
                className="cursor-pointer dark:text-white text-clientGray sm:text-3xl text-xl font-normal sm:mr-48"
              >
                {t("Register")}
              </p>
            </div>
            <div>
              <div className="relative">
                <p className=" font-body text-lg dark:text-white  sm:mb-10px  text-grayInput sm:text-xl mb-4 font-medium">
                  {t("E-mail")}
                </p>
                <input
                  id="email"
                  name="email"
                  type="email"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.email}
                  placeholder={t("E-mail")}
                  className="pl-3 sm:h-68px rounded-5 bg-clientInput w-full h-14 text-lg font-medium"
                />
                {formik.touched.email && formik.errors.email ? (
                  <div className="text-red-500 dark:text-red-400 absolute pt-3 font-bold">
                    {formik.errors.email}
                  </div>
                ) : null}
              </div>
              <div className="my-10 relative">
                <p className=" font-body sm:mb-10px text-lg dark:text-white text-grayInput sm:text-xl mb-2 font-medium">
                  {t("Password")}
                </p>
                <input
                  id="password"
                  name="password"
                  type="password"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.password}
                  placeholder={t("E-mail")}
                  className="pl-3 sm:h-68px rounded-5 bg-clientInput w-full h-14 text-lg font-medium"
                />
                {formik.touched.password && formik.errors.password ? (
                  <div className="text-red-500 dark:text-red-400 absolute  pt-3 font-bold">
                    {formik.errors.password}
                  </div>
                ) : null}
              </div>
            </div>

            <button className="w-full text-2xl mt-7 font-semibold rounded-5 text-white sm:h-68px dark:bg-green-600 bg-clientRed  h-14 hover:opacity-75 transition-all  duration-500">
              {formik.isSubmitting ? (
                <div className="flex justify-center items-center mx-0 my-auto">
                  <FadeLoader color="#fff" />
                </div>
              ) : (
                t("Login")
              )}
            </button>
          </form>
        </div>
      </main>
    </>
  );
};
export default LoginPage;
export const getServerSideProps: GetServerSideProps = async ({ locale }) => ({
  props: {
    ...(await serverSideTranslations(locale as string, ["common"])),
  },
});
