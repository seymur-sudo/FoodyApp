import Head from "next/head";
import React from "react";
import { useRouter } from "next/navigation";
import Image from "next/image";
import { toast } from "react-toastify";
import { useTranslation } from "next-i18next";
import ClientHeader from "@/components/Client/ClientHeader";
import { GetServerSideProps } from "next";
import { serverSideTranslations } from "next-i18next/serverSideTranslations";
import { useMutation } from "react-query";
import { FadeLoader } from "react-spinners";
import { ROUTER } from "../../shared/constant/router";
import { isValidEmail } from "@/constant/ValidRegex";
import { useFormik } from "formik";
import { FormValues } from "@/interfaces";
import { signupUser } from "@/services";

const validate = (values: FormValues) => {
  let errors: Partial<FormValues> = {};
  if (values.fullName?.length && values.fullName.length < 5) {
    errors.fullName = "Must be 5 characters or more";
  } else if (values.fullName?.length && values.fullName.length > 15) {
    errors.fullName = "Must be 15 characters or less";
  }
  if (values.userName?.length && values.userName.length < 5) {
    errors.userName = "Must be 5 characters or more";
  } else if (values.userName?.length && values.userName.length > 20) {
    errors.userName = "Must be 20 characters or less";
  }

  if (!values.email) {
    errors.email = "Required";
  } else if (!isValidEmail(values.email)) {
    errors.email = "Invalid email address";
  }

  if (!values.password) {
    errors.password = "Required";
    // } else if (!isValidPhone(values.phone)) {
    //   errors.password = "Invalid phone number";
  }

  return errors;
};

const RegisterPage: React.FC = () => {
  const { t } = useTranslation("common");
  const { push } = useRouter();

  const { mutate: signup } = useMutation({
    mutationFn: signupUser,
    onSuccess: (data) => {
      if (data) {
        toast.success("Registered With Successfully", {
          autoClose: 1000,
        });
        push(ROUTER.LOGIN);
      } else {
        toast.error("Please, Enter Correct Email and Password!", {
          autoClose: 1000,
        });
      }
    },
    onError: (error: Error) => {
      console.error("Error:", error);
      toast.error("Please, Enter Right Personal Information!", {
        autoClose: 1000,
      });
    },
  });

  const formik = useFormik({
    initialValues: {
      email: "",
      password: "",
      fullName: "",
      userName: "",
    },
    validate,
    onSubmit: (values) => {
      signup(values);
    },
  });

  return (
    <>
      <Head>
        <title>Foody | Register</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="sm:mr-32px sm:ml-32px" style={{ zoom: "0.66" }}>
        <ClientHeader />
        <div className="flex-col mx-3  flex lg:flex-row sm:mx-0 font-body">
          <div
            className="bg-clientRed dark:bg-green-600 py-3 lg:w-3/6 w-full lg:h-[900px] h-[160px] sm:pt-24 sm:pl-40 sm:mr-10 sm:pb-48 sm:pr-15 px-10 rounded-4 mb-6"
            data-aos="fade-right"
          >
            <Image
              alt="register"
              width={100}
              height={100}
              src="/svgs/register.svg"
              className="lg:w-5/6 lg:h-[630px] h-[150px] w-[240px] mx-auto"
            />
          </div>
          <form
            className="lg:w-2/6 mx-auto w-full"
            data-aos="fade-left"
            onSubmit={formik.handleSubmit}
          >
            <div className="flex lg:ml-20 mx-auto justify-center flex-row sm:gap-x-16 sm:ml-174px sm:mb-12 sm:mt-105px gap-x-9">
              <p
                onClick={() => push(ROUTER.LOGIN)}
                className="cursor-pointer dark:text-white text-clientGray sm:text-3xl text-xl font-normal"
              >
                {t("Login")}
              </p>
              <p className="text-clientRed dark:text-green-300 sm:text-3xl text-xl font-medium sm:mr-44">
                {t("Register")}
              </p>
            </div>
            <div>
              <div>
                <p className=" font-body dark:text-white text-lg sm:mb-10px sm:text-xl text-grayInput mb-2 font-medium">
                  {t("Full Name")}
                </p>
                <input
                  id="fullName"
                  name="fullName"
                  type="text"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.fullName}
                  placeholder={t("Full Name")}
                  className="pl-3 sm:h-68px rounded-5 bg-clientInput w-full h-14 text-lg font-medium"
                />
                {formik.touched.fullName && formik.errors.fullName ? (
                  <div className="text-red-500 dark:text-red-400 font-bold text-xl pt-1">
                    {formik.errors.fullName}
                  </div>
                ) : null}
              </div>
              <div className="my-5">
                <p className=" font-body dark:text-white text-lg sm:mb-10px  text-grayInput sm:text-xl mb-2 font-medium">
                  {t("User Name")}
                </p>
                <input
                  id="userName"
                  name="userName"
                  type="text"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.userName}
                  placeholder={t("User Name")}
                  className="pl-3 sm:h-68px rounded-5 bg-clientInput w-full h-14 text-lg font-medium"
                />
                {formik.touched.userName && formik.errors.userName ? (
                  <div className="text-red-500 dark:text-red-400  font-bold text-xl pt-1">
                    {formik.errors.userName}
                  </div>
                ) : null}
              </div>
              <div className="">
                <p className=" font-body text-lg dark:text-white  sm:mb-10px  text-grayInput sm:text-xl mb-4 font-medium">
                  {t("E-mail")}
                </p>
                <input
                  id="email"
                  name="email"
                  type="email"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.email}
                  placeholder={t("E-mail")}
                  className="pl-3 sm:h-68px rounded-5 bg-clientInput w-full h-14 text-lg font-medium"
                />
                {formik.touched.email && formik.errors.email ? (
                  <div className="text-red-500 dark:text-red-400 text-xl font-bold pt-2">
                    {formik.errors.email}
                  </div>
                ) : null}
              </div>
              <div className="my-5">
                <p className=" font-body sm:mb-10px text-lg dark:text-white text-grayInput sm:text-xl mb-2 font-medium">
                  {t("Password")}
                </p>
                <input
                  id="password"
                  name="password"
                  type="password"
                  onChange={formik.handleChange}
                  onBlur={formik.handleBlur}
                  value={formik.values.password}
                  placeholder={t("E-mail")}
                  className="pl-3 sm:h-68px rounded-5 bg-clientInput w-full h-14 text-lg font-medium"
                />
                {formik.touched.password && formik.errors.password ? (
                  <div className="text-red-500 dark:text-red-400 text-xl font-bold pt-1">
                    {formik.errors.password}
                  </div>
                ) : null}
              </div>
            </div>
            <button className="w-full text-2xl mt-4 font-semibold rounded-5 text-white sm:h-68px dark:bg-green-600 bg-clientRed  h-14 hover:opacity-75 transition-all  duration-500">
              {formik.isSubmitting ? (
                <div className="flex justify-center items-center mx-0 my-auto">
                  <FadeLoader className="text-white dark:text-orange-300" />
                </div>
              ) : (
                t("Register")
              )}
            </button>
          </form>
        </div>
      </main>
    </>
  );
};
export default RegisterPage;
export const getServerSideProps: GetServerSideProps = async ({ locale }) => ({
  props: {
    ...(await serverSideTranslations(locale as string, ["common"])),
  },
});
